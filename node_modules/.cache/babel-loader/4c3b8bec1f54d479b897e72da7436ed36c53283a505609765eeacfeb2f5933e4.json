{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kkonkima\\\\Downloads\\\\01-starting-project (6)\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    // https://react-http-e189d-default-rtdb.firebaseio.com/\n    // https://swapi.dev/api/films\n    try {\n      const response = await fetch('https://react-http-e189d-default-rtdb.firebaseio.com/movies.json');\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const data = await response.json();\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n      // const transformedMovies = data.results.map((movieData)=> {\n      //   return {\n      //     id: movieData.episode_id,\n      //     title: movieData.title,\n      //     openingText: movieData.opening_crawl,\n      //     releaseDate: movieData.release_date\n      //   }\n      // })\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  });\n  useEffect(() => fetchMoviesHandler(), [fetchMoviesHandler]);\n  //  useEffect(fetchMoviesHandler,[]);\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-e189d-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  // useEffect(()=>{\n  //   fetchMoviesHandler();\n  // },[fetchMoviesHandler]);\n\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try{\n  //     const response = await fetch('https://swapi.dev/api/film/');\n  //     if(!response.ok){\n  //       throw new Error('Something went wrong!');\n  //     }\n  //   const data = await response.json();\n\n  //   const transformedMovies = data.results.map((movieData)=> {\n  //     return {\n  //       id: movieData.episode_id,\n  //       title: movieData.title,\n  //       openingText: movieData.opening_crawl,\n  //       releaseDate: movieData.release_date\n  //     }\n  //   })\n  //   setMovies(transformedMovies);\n  //   }\n  //   catch(error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  // function fetchMoviesHandler() {\n  //   fetch('https://swapi.dev/api/films').then(response =>{\n  //     return response.json();\n  //   }).then(data => {\n  //     const transformedMovies = data.results.map(movieData => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date\n  //       };\n  //     })\n  //     setMovies(transformedMovies);\n  //   });\n  // }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nYb692ouuFWm3aetsG14gB9xAUU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","MoviesList","AddMovie","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","onAddMovie","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kkonkima/Downloads/01-starting-project (6)/01-starting-project/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  const [movies,setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  const fetchMoviesHandler = useCallback( async ()=> {\n    setIsLoading(true);\n    setError(null);\n    // https://react-http-e189d-default-rtdb.firebaseio.com/\n    // https://swapi.dev/api/films\n    try{\n      const response = await \n      fetch('https://react-http-e189d-default-rtdb.firebaseio.com/movies.json');\n      if(!response.ok){\n        throw new Error('Something went wrong!');\n      }\n    const data = await response.json();\n    \n    const loadedMovies = [];\n    for(const key in data) {\n      loadedMovies.push({\n        id: key,\n        title: data[key].title,\n        openingText: data[key].openingText,\n        releaseDate: data[key].releaseDate,\n      })\n    }\n    // const transformedMovies = data.results.map((movieData)=> {\n    //   return {\n    //     id: movieData.episode_id,\n    //     title: movieData.title,\n    //     openingText: movieData.opening_crawl,\n    //     releaseDate: movieData.release_date\n    //   }\n    // })\n    setMovies(loadedMovies);\n    }\n    catch(error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  })\n\n  useEffect(()=>\n    fetchMoviesHandler()\n  ,[fetchMoviesHandler]);\n  //  useEffect(fetchMoviesHandler,[]);\n   async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-e189d-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  // useEffect(()=>{\n  //   fetchMoviesHandler();\n  // },[fetchMoviesHandler]);\n\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try{\n  //     const response = await fetch('https://swapi.dev/api/film/');\n  //     if(!response.ok){\n  //       throw new Error('Something went wrong!');\n  //     }\n  //   const data = await response.json();\n      \n  //   const transformedMovies = data.results.map((movieData)=> {\n  //     return {\n  //       id: movieData.episode_id,\n  //       title: movieData.title,\n  //       openingText: movieData.opening_crawl,\n  //       releaseDate: movieData.release_date\n  //     }\n  //   })\n  //   setMovies(transformedMovies);\n  //   }\n  //   catch(error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  // function fetchMoviesHandler() {\n  //   fetch('https://swapi.dev/api/films').then(response =>{\n  //     return response.json();\n  //   }).then(data => {\n  //     const transformedMovies = data.results.map(movieData => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date\n  //       };\n  //     })\n  //     setMovies(transformedMovies);\n  //   });\n  // }\n\n  let content = <p>Found no movies</p>;\n\n  if(movies.length > 0) {\n    content = <MoviesList movies= {movies} />\n  }\n\n  if(error) {\n    content = <p>{error}</p>\n  }\n\n  if(isLoading){\n    content = <p>Loading...</p>\n  }\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie = {addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} /> }\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>} */}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}